---
title: "SMILE_main"
format: html
self-contained: true
---

Testing if the new function can recreate all the previous scenarios and new ones. Having a main function will help with the iteration and testing of the vaccine scenarios.

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(cowplot)
```


```{r}
source(file = "../SMILE_v1.1.R")
source(file = "../smile_main.R")
```

```{r echo=FALSE}
# function to make the plots comparing original function to new function:

build_comp_plots <- function(og_sims, new_sims) {
  
  sim5.0 <- og_sims
  sim5_1 <- new_sims
  
      # Susceptibles
    sim5.0$Suceptibles %>% tibble() %>% rownames_to_column() %>% purrr::set_names(c("week", "S")) %>% mutate(fx = "OG") %>% 
      mutate(week = as.numeric(week)) -> S_comp
      
    S_comp %>% 
      bind_rows(sim5_1$Suceptibles %>% tibble() %>% rownames_to_column() %>%
                  purrr::set_names(c("week", "S")) %>% mutate(fx = "NEW", week = as.numeric(week))) %>% 
      ggplot(aes(x = week, y = S)) +
      facet_wrap(~fx) +
      geom_line() +
      theme_bw() -> S_plot
    
    # Immune
    sim5.0$Immune %>% tibble() %>% rownames_to_column() %>% purrr::set_names(c("week", "M")) %>% mutate(fx = "OG") %>% 
      mutate(week = as.numeric(week)) -> M_comp
      
    M_comp %>% 
      bind_rows(sim5_1$Immune %>% tibble() %>% rownames_to_column() %>%
                  purrr::set_names(c("week", "M")) %>% mutate(fx = "NEW", week = as.numeric(week))) %>% 
      ggplot(aes(x = week, y = M)) +
      facet_wrap(~fx) +
      geom_line() +
      theme_bw() -> M_plot
    
    # Infected
    sim5.0$Infected %>% tibble() %>% rownames_to_column() %>% purrr::set_names(c("week", "I")) %>% mutate(fx = "OG") %>% 
      mutate(week = as.numeric(week)) -> I_comp
      
    I_comp %>% 
      bind_rows(sim5_1$Infected %>% tibble() %>% rownames_to_column() %>%
                  purrr::set_names(c("week", "I")) %>% mutate(fx = "NEW", week = as.numeric(week))) %>% 
      ggplot(aes(x = week, y = I)) +
      facet_wrap(~fx) +
      geom_line() +
      theme_bw() -> I_plot
    
    # LIZ
    sim5.0$LIZ %>% tibble() %>% rownames_to_column() %>% purrr::set_names(c("week", "L")) %>% mutate(fx = "OG") %>% 
      mutate(week = as.numeric(week)) -> L_comp
      
    L_comp %>% 
      bind_rows(sim5_1$LIZ %>% tibble() %>% rownames_to_column() %>%
                  purrr::set_names(c("week", "L")) %>% mutate(fx = "NEW", week = as.numeric(week))) %>% 
      ggplot(aes(x = week, y = L)) +
      facet_wrap(~fx) +
      geom_line() +
      theme_bw() -> L_plot
    
    
    # E
    sim5.0$E %>% tibble() %>% rownames_to_column() %>% purrr::set_names(c("week", "E")) %>% mutate(fx = "OG") %>% 
      mutate(week = as.numeric(week)) -> E_comp
      
    E_comp %>% 
      bind_rows(sim5_1$E %>% tibble() %>% rownames_to_column() %>%
                  purrr::set_names(c("week", "E")) %>% mutate(fx = "NEW", week = as.numeric(week))) %>% 
      ggplot(aes(x = week, y = E)) +
      facet_wrap(~fx) +
      geom_line() +
      theme_bw() -> E_plot
    
    plot_grid(S_plot, M_plot, I_plot, L_plot, E_plot, ncol = 1)

}
```

# smile1
No age structuring, infection probability is not seasonal
```{r}
tau=10
b=0.001

# Case 1.0: Low Dispersion. Mean dispersion effort is 0.1
theta=100
sim1.0	<-	smile1(b=b,tau=tau,theta=theta,years=10)
```

```{r}
# To recreate this scenario with the new function:
sim1_1 <- smile_fx(tau = 10, b_fixed = 0.001, theta = 100, years = 10, age_struc = FALSE)
```


```{r echo=FALSE, fig.width=10, fig.height=12}
build_comp_plots(sim1.0, sim1_1)
```

# smile2
This function simulates anthrax disease dynamics without host population dynamics but infection probability has seasonal forcing.
```{r}
# Case 2: No age structuring, infection probability has seasonal forcing
tau=10
b0=-30
b1=0.85
period=3*52

# Case 2.0: Low dispersion
theta=100
sim2.0	<-	smile2(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10)
```

```{r}

sim2_1 <- smile_fx(b0 = -30, b1 = 0.85, period = 3*52, theta = 100, tau = 10, years = 10, age_struc = FALSE)
```


```{r echo=FALSE, fig.width=10, fig.height=12}
build_comp_plots(sim2.0, sim2_1)
```

# smile3
Only births with no seasonal infection probability 
```{r}
# Case 3: With births and no seasonal infection probability
tau=10
b=0.001

# Case 3.0: Low Dispersion. Mean dispersion effort is 0.1
theta=100
sim3.0	<-	smile3(b=b,tau=tau,theta=theta,years=10)
```

```{r}
# If we don't consider seasonal forcing, then b0 and b1 are left as null (the default) and we give the parameter b_fixed for fixed infection probability
sim3_1 <- smile_fx(tau = 10, b_fixed = 0.001, theta = 100, years = 10)
```


```{r echo=FALSE, fig.width=10, fig.height=12}
build_comp_plots(sim3.0, sim3_1)
```


# smile4 
 With births and seasonal forcing of infection
 
```{r}
tau=10
b0=-30
b1=0.85
period=3*52

# Case 4.0: Low Dispersion. Mean dispersion effort is 0.1
theta=100
sim4.0	<-	smile4(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10)
```

```{r}
# In the function we change sigmaa = 1, since the smile4 function does not consider deaths from other causes.
sim4_1 <- smile_fx(b0 = -30, b1 = 0.85, period = 3*52, theta = 100, tau = 10, years = 10, sigmaa = 1)
```

```{r echo=FALSE, fig.width=10, fig.height=12}
build_comp_plots(sim4.0, sim4_1)
```

 

# smile5
This one incorporates both host population dynamics and seasonal forcing, but additionally puts in the death by other causes.

```{r}
tau=10
b0=-30
b1=0.85
period=3*52

# Case 5.0: Low Dispersion. Mean dispersion effort is 0.1
theta=10
sim5.0		<-	smile5(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10)
```

```{r}
sim5_1 <- smile_fx(b0 = -30, b1 = 0.85, period = 3*52, theta = 10, tau = 10, years = 10, sigmaa = 0.92^(1/52))
```


```{r echo=FALSE, fig.width=10, fig.height=12}
build_comp_plots(sim5.0, sim5_1)
```

# Stochastic version of the last one:

```{r}
stochastic.sims	<-	list()
LIZ.stoch		<-	matrix(0,nrow=100,ncol=520)
for(i in 1:100){
  
	stochastic.sims[[i]]	<-	smile5.stoch(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10)
	LIZ.stoch[i,]			<-	stochastic.sims[[i]]$LIZ
	
}
```

```{r}

stochastic_sims	<-	list()
LIZ_stoch		<-	matrix(0,nrow=100,ncol=520)
for(i in 1:100){
  
	stochastic_sims[[i]]	<-	smile_fx(b0 = -30, b1 = 0.85, period = 3*52, theta = 10, tau = 10, years = 10, sigmaa = 0.92^(1/52), stochastic = TRUE)
	LIZ_stoch[i,]			<-	stochastic.sims[[i]]$LIZ
	
}

```


```{r}
as.data.frame(LIZ.stoch) %>% rownames_to_column(var = "sim") %>% 
  pivot_longer(-sim, names_to = "week", values_to = "n_LIZ") %>% 
  mutate(week = str_remove(week, "V"), week = as.numeric(week)) %>% 
  mutate(model = "OG") -> og_stochastic

as.data.frame(LIZ_stoch) %>% rownames_to_column(var = "sim") %>% 
  pivot_longer(-sim, names_to = "week", values_to = "n_LIZ") %>% 
  mutate(week = str_remove(week, "V"), week = as.numeric(week)) %>% 
  mutate(model = "NEW") -> new_stochastic
```

Very similar results, considering this is the stochastic versions. It makes sense. 
```{r}
bind_rows(og_stochastic, new_stochastic) %>% 
  # filter(sim %in% 10:15) %>% 
  ggplot(aes(x = week, y = n_LIZ, group = sim)) +
  facet_wrap(~model) +
  # facet_grid(sim~model) +
  geom_line() +
  theme_minimal()
```
Try to get the estimates from these stochastic sims:

```{r}
set.seed(123) 
b0_start	<-	runif(1,min=-36,max=-24) 
b1_start	<-	runif(1,min=0.656,max=0.984) 
theta_start	<-	log(runif(1,min=8,max=12)) 
tau_start	<-	log(runif(1,min=8,max=12))

SMILE_obs <- stochastic_sims
nreps <- length(SMILE_obs)

hat_mat			<-	array(0,dim=c(nreps,5),dimnames=list(1:nreps
															 ,c("tau","theta","b0","b1","loglik")))

for(i in 1:nreps){
	
	hat_mat[i,]	<-	SMILE_param_estim(b0 = b0_start,
	                                 b1 = b1_start,
	                                 theta = theta_start,
	                                 tau = tau_start,
	                                 SMILE.obs=SMILE_obs[[i]],period=3*52)
								}
```

Parameter estimates for each of the stochastic simulations we generated. All simulations used the values shown with the red line to be generated. 

```{r}

# estimates from the stochastic simulations
hat_mat %>% as.data.frame() %>% rownames_to_column(var = "run") %>% 
  pivot_longer(-run, names_to = "parameter") -> long_hatmat

long_hatmat %>% 
  filter(parameter == "b0") %>% 
  ggplot(aes(x = value)) +
  geom_density() +
  geom_vline(xintercept = -30, color = "red") +
  theme_classic() -> b0_plot

long_hatmat %>% 
  filter(parameter == "b1") %>% 
  ggplot(aes(x = value)) +
  geom_density() +
  geom_vline(xintercept = 0.85, color = "red") +
  theme_classic() -> b1_plot

long_hatmat %>% 
  filter(parameter == "theta") %>% 
  ggplot(aes(x = value)) +
  geom_density() +
  geom_vline(xintercept = 10, color = "red") +
  theme_classic() -> theta_plot

long_hatmat %>% 
  filter(parameter == "tau") %>% 
  ggplot(aes(x = value)) +
  geom_density() +
  geom_vline(xintercept = 10, color = "red") +
  theme_classic() -> tau_plot

plot_grid(b0_plot, b1_plot, theta_plot, tau_plot, nrow = 2)

```


# Adding vaccine 

I modified the main function so we use the same one and just change the arguments.

```{r}

years <- 23
vacc.pcts<- c(0.34, 0.24, 0.37, 0.44, 0.44, 0.64, 0.71, 0.69, 0.73, 
              0.72, 0.66, 0.60, 0.57, 0.27, 0.27, 0.16, 0.12, 0.12, 
              0.10, 0.08, 0.05, 0.05, 0.02)

vax_smile5 <- smile_fx(b0 = -30, b1 = 0.85, period = 3*52, theta = 100, tau = 1, years = 23, 
                       beta_0 = -3.5, beta_1 = 7.4, vax = vacc.pcts, N1 = 20000, K = 50000, output_df = TRUE)

vax_smile5 %>% 
  pivot_longer(-week, names_to = "compartment", values_to = "n") %>% 
  mutate(compartment = factor(compartment, levels = c("S", "M", "I", "L", "E", "Z"))) %>% 
  ggplot(aes(x = week, y = n)) +
  facet_wrap(~compartment, scales = "free") +
  geom_path() +
  theme_bw()
```

## Scenario 6 from Tan's where we have no seasonality in transmission 

```{r}

vax_smile6 <- smile_fx(b0 = NULL, b1 = NULL, period = NULL, theta = 100, tau = 1, years = 23, 
                       beta_0 = -3.5, beta_1 = 6.86, vax = vacc.pcts, N1 = 20000, K = 50000, b_fixed = 0.001, output_df = TRUE)

vax_smile6 %>% 
  pivot_longer(-week, names_to = "compartment", values_to = "n") %>% 
  mutate(compartment = factor(compartment, levels = c("S", "M", "I", "L", "E", "Z"))) %>% 
  ggplot(aes(x = week, y = n)) +
  facet_wrap(~compartment, scales = "free") +
  geom_path() +
  theme_bw()

```



# What ifs.

with 100% vaccine cover and seasonal transmission 

```{r}

vax_smile_tests <- smile_fx(b0 = -30, b1 = 0.85, period = 3*52, theta = 100, tau = 1, years = 23, 
                       beta_0 = -5, beta_1 = 20, vax = rep(1, 23), N1 = 20000, K = 50000, output_df = TRUE)

vax_smile_tests %>% 
  pivot_longer(-week, names_to = "compartment", values_to = "n") %>% 
  mutate(compartment = factor(compartment, levels = c("S", "M", "I", "L", "E", "Z"))) %>% 
  ggplot(aes(x = week, y = n)) +
  facet_wrap(~compartment, scales = "free") +
  geom_path() +
  theme_bw()

```

Vaccine function. the issue with this function is that it assumes zero survival under 0% vaccination, which isn't accurate since survival rates seem to be up to 88% without vaccination


```{r}
beta_0 = -3.5; beta_1 = 7.4

vax.prcnt <- seq(0, 1, 0.001)
surv.prob <- (1 / (1 + exp(-(beta_0 + beta_1 * vax.prcnt))))


data.frame(vax.prcnt, surv.prob) %>% 
  ggplot(aes(x = vax.prcnt, y = surv.prob)) +
  geom_line() +
  theme_bw()

```


alternative, use a parabola

```{r}

vax.prcnt <- seq(0, 1.2, 0.001)

x = vax.prcnt
a = -0.25
h = 1
k = 0.99
surv.prob <- a*(x - h)^2 + k

surv.prob <- -0.25 * (vax.prcnt - 1)^2 + 0.999

data.frame(vax.prcnt, surv.prob) %>% 
  ggplot(aes(x = vax.prcnt, y = surv.prob)) +
  geom_line() +
  geom_hline(yintercept = 1, color = "red") +
  geom_hline(yintercept = 0.8, color = "blue") +
  geom_vline(xintercept = 1, color = "red") +
  theme_bw()


```



