[{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/add_vax.html","id":"we-can-compare-this-to-variable-vaccination-rates","dir":"Articles","previous_headings":"","what":"We can compare this to variable vaccination rates:","title":"add_vax","text":"simulation observe drops vaccination, direct increase number deaths spores environment.","code":"smile_main(b0 = my_b0, b1 = my_b1, period = my_outbreak_period,            theta = my_theta, tau = my_tau, years = my_years,            vax = my_yearly_vax, beta_0 = my_beta0, beta_1 = my_beta1, output_df = TRUE) -> var_vax_sim  head(var_vax_sim) #>   week    S M I L        E          Z #> 1    1 5000 0 0 1 1.000000 0.04409603 #> 2    2 5000 0 0 0 1.986800 0.04409603 #> 3    3 5000 0 0 0 1.960574 0.04409603 #> 4    4 5000 0 0 0 1.934695 0.04409603 #> 5    5 5000 0 0 0 1.909157 0.04409603 #> 6    6 5000 0 0 0 1.883956 0.04409603 var_vax_sim |> build_SMILE_plots()"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"try-parameters-so-outbreaks-match-what-we-see-in-vietnam","dir":"Articles","previous_headings":"","what":"Try parameters so outbreaks match what we see in Vietnam","title":"epi2024","text":"parameters working Tan sort recreate shape outbreaks:","code":"n_years <- 23 vacc.pcts<- c(0.34, 0.24, 0.37, 0.44, 0.44, 0.64, 0.71, 0.69, 0.73,                0.72, 0.66, 0.60, 0.57, 0.27, 0.27, 0.16, 0.12, 0.12,                0.10, 0.08, 0.05, 0.05, 0.02)  # For the disease dispersion theta = 100 tau = 1 # ggplot() + stat_function(fun = dgamma, args = list(shape = theta, rate = tau)) + scale_x_continuous(limits = c(0, 2*theta/tau))  # For vaccine effect over survival beta_0 = -3.5 beta_1 = 7  # no seasonal forcing so, assuming the number of infections that a LIZ causes assuming no dispersion effort remains constant b = 0.001 vax_smile6 <- smile_main(b0 = NULL, b1 = NULL, period = NULL, theta = theta, tau = tau, years = n_years,                         beta_0 = beta_0, beta_1 = beta_1, vax = vacc.pcts, N1 = 20000, K = 50000,                        b_fixed = b, rho_pop = 0.36, output_df = TRUE) build_SMILE_plots(vax_smile6)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"using-those-parameters-this-is-what-the-underlying-processes-look-like","dir":"Articles","previous_headings":"","what":"Using those parameters, this is what the underlying processes look like:","title":"epi2024","text":"trying see model can help us understand disease dynamics northern province Vietnam. context simulations based Vietnam case.","code":"infection_probability <- lambda_t(theta=theta, tau=tau, b=b, E = vax_smile6$E[-1]) nweeks <- 1:(n_years*52)  data.frame(week = nweeks, infection_probability = infection_probability) %>%    ggplot(aes(x = week, y = infection_probability)) +   geom_line() +   theme_bw() +   labs(title = \"Infection Probability\", y = \"lambda(t)\") -> inf_prob_plot   data.frame(year = 1:n_years, vacc.pcts) %>%    ggplot(aes(x = year, y = vacc.pcts)) +   geom_point() +   geom_line() +   theme_bw() +   labs(title = \"Vaccination Rate Data\", x = \"Year\", y = \"Vax rate\") +   scale_y_continuous(labels = scales::label_percent(), limits = c(0,1)) -> vax_rates_plot  survival_prob <- 1 / (1 + exp(-(beta_0 + beta_1 * vacc.pcts)))  vax_prcnt <- seq(0, 1, 0.001) surv_prob <- (1 / (1 + exp(-(beta_0 + beta_1 * vax_prcnt))))   data.frame(vax_prcnt, surv_prob) %>%    ggplot(aes(x = vax_prcnt, y = surv_prob)) +   geom_line() +   theme_bw() +   scale_x_continuous(labels = scales::label_percent(), breaks = seq(0, 1, 0.1)) +   labs(x = \"Vaccination rate\", y = \"Survival Probability\") -> survival_curve_plot  # To visualize the dispersion effort, which follows a gamma distribution # ggplot() + #   stat_function(fun = dgamma, args = list(rate = theta, shape = tau)) + #   lims(x = c(0, 1))  plot_grid(plot_grid(inf_prob_plot, vax_rates_plot, ncol = 2), survival_curve_plot, nrow = 2)"},{"path":[]},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"vaccination","dir":"Articles","previous_headings":"POSTER FIGURES","what":"Vaccination","title":"epi2024","text":"survival probability curve assuming incorporating vaccines. red line shows static 88% survival rate used original paper (probability bison surviving spore exposure developing immunity \\(\\zeta\\)). survival probability function used \\[ \\zeta(vax) = \\frac{1}{1 + \\exp^{-(\\beta_0 + \\beta_1 \\cdot vax)}} \\] expect every species different survival probability curve, can adjusted parameters \\(\\beta_0\\) \\(\\beta_1\\). also, different vaccine types even different pathogen strains may role survival curve, thus parameters can adjusted accordingly.","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"survival-curves","dir":"Articles","previous_headings":"POSTER FIGURES","what":"Survival curves","title":"epi2024","text":"","code":"# Palette for the three scenarios surv_palette <- viridisLite::viridis(12, option = \"A\") surv_3_cols <- surv_palette[c(2,6,9)] # scales::show_col(surv_3_cols) my_beta_1 = 10 my_betas_0 = seq(-11, 5, length.out = 20) sim_betas_0 <- c(-10, -3, 1.5)  vax_prcnt <- seq(0, 1, 0.001)  data.frame(vax_prcnt, betas_0 = rep(sim_betas_0, each = length(vax_prcnt)), betas_1 = my_beta_1) %>%    mutate(surv_prob = (1 / (1 + exp(-(betas_0 + betas_1 * vax_prcnt))))) -> sim_survival_curves  data.frame(vax_prcnt, betas_0 = rep(my_betas_0, each = length(vax_prcnt)), betas_1 = my_beta_1)  %>%    mutate(surv_prob = (1 / (1 + exp(-(betas_0 + betas_1 * vax_prcnt))))) %>%    ggplot(aes(x = vax_prcnt, y = surv_prob, color = betas_0, fill = betas_0)) +   geom_line(linewidth = 0.8) +   geom_path(data = sim_survival_curves, aes(x = vax_prcnt, y = surv_prob, group = betas_0), color = \"grey\", linewidth = 1.5) +   # geom_hline(yintercept = 0.88, color = \"red\", linewidth = 0.9) +   scale_color_viridis_c(option = \"A\") +   scale_fill_viridis_c(option = \"A\") +   theme_bw() +   scale_x_continuous(labels = scales::label_percent(), breaks = seq(0, 1, 0.1)) +   labs(x = \"Vaccination rate\", y = \"Survival Probability\", color = expression(beta[0]),        title = expression(\"Survival probability curves with fixed\"~beta[1]~\"=10\")) data.frame(vax_prcnt, betas_0 = rep(sim_betas_0, each = length(vax_prcnt)), betas_1 = my_beta_1) %>%    mutate(surv_prob = (1 / (1 + exp(-(betas_0 + betas_1 * vax_prcnt))))) %>%    mutate(betas_0 = factor(betas_0)) -> my_vax_curves  # my_vax_curves %>%  #   ggplot(aes(x = vax_prcnt, y = surv_prob, color = betas_0)) + #   geom_line(linewidth = 1) + #   # geom_hline(yintercept = 0.88, color = \"red\", linewidth = 0.9) + #   theme_bw() + #   scale_x_continuous(labels = scales::label_percent(), breaks = seq(0, 1, 0.1)) + #  labs(x = \"Vaccination rate\", y = \"Survival Probability\", color = expression(beta[0]), #        title = expression(\"Survival probability curves with fixed\"~beta[1]~\"=10\")) + #   scale_color_manual(values = surv_3_cols)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"no-vax-scenarios","dir":"Articles","previous_headings":"","what":"No VAX SCENARIOS","title":"epi2024","text":"","code":"# epi poster scenario defaults my_tau <- 1 my_theta <- 100 my_b_fixed <- 0.001  # These are the survival probabilities when there is no vaccination under those three curves. low_surv <- my_vax_curves %>% filter(betas_0 == -10 & vax_prcnt == 0) %>%  pull(surv_prob) med_surv <- my_vax_curves %>% filter(betas_0 == -3 & vax_prcnt == 0) %>%  pull(surv_prob) high_surv <- my_vax_curves %>% filter(betas_0 == 1.5 & vax_prcnt == 0) %>%  pull(surv_prob)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"low-survival","dir":"Articles","previous_headings":"No VAX SCENARIOS","what":"LOW SURVIVAL","title":"epi2024","text":"","code":"novax_noseason <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed survival probability and fixed b                             zeta_novax = low_surv, b_fixed = my_b_fixed,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE)  # novax_noseason %>% build_SMILE_plots()  novax_yesseason <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed survival probability                             zeta_novax = low_surv,                             # Parameters to induce seasonal forcing in transmission                             b0 = -30, b1 = 0.85, period = 3*52,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) # novax_yesseason %>% build_SMILE_plots() novax_noseason %>%    pivot_longer(-week, names_to = \"compartment\", values_to = \"n\") %>%    mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"Z\"))) %>%    mutate(seasonality = \"no\") -> long_novax_noseason  novax_yesseason %>%    pivot_longer(-week, names_to = \"compartment\", values_to = \"n\") %>%    mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"Z\"))) %>%    mutate(seasonality = \"yes\") -> long_novax_yesseason  bind_rows(long_novax_noseason, long_novax_yesseason) %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%   mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%    mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = seasonality)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8) +   theme_bw() +   scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(title = paste(\"No vaccination, low survival - zeta =\", signif(low_surv, 4)),         y = \"Number of individuals\")"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"med-survival","dir":"Articles","previous_headings":"No VAX SCENARIOS","what":"MED SURVIVAL","title":"epi2024","text":"","code":"novax_noseason <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed survival probability and fixed b                             zeta_novax = med_surv, b_fixed = my_b_fixed,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE)  # novax_noseason %>% build_SMILE_plots()  novax_yesseason <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed survival probability                             zeta_novax = med_surv,                             # Parameters to induce seasonal forcing in transmission                             b0 = -30, b1 = 0.85, period = 3*52,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) # novax_yesseason %>% build_SMILE_plots() novax_noseason %>%    pivot_longer(-week, names_to = \"compartment\", values_to = \"n\") %>%    mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"Z\"))) %>%    mutate(seasonality = \"no\") -> long_novax_noseason  novax_yesseason %>%    pivot_longer(-week, names_to = \"compartment\", values_to = \"n\") %>%    mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"Z\"))) %>%    mutate(seasonality = \"yes\") -> long_novax_yesseason  bind_rows(long_novax_noseason, long_novax_yesseason) %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%   mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%    mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = seasonality)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8) +   theme_bw() +   scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(title = paste(\"No vaccination, medium survival - zeta =\", signif(med_surv, 4)),         y = \"Number of individuals\")"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"high-survival","dir":"Articles","previous_headings":"No VAX SCENARIOS","what":"HIGH SURVIVAL","title":"epi2024","text":"","code":"novax_noseason <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed survival probability and fixed b                             zeta_novax = high_surv, b_fixed = my_b_fixed,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE)  # novax_noseason %>% build_SMILE_plots()  novax_yesseason <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed survival probability                             zeta_novax = high_surv,                             # Parameters to induce seasonal forcing in transmission                             b0 = -30, b1 = 0.85, period = 3*52,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) # novax_yesseason %>% build_SMILE_plots() novax_noseason %>%    pivot_longer(-week, names_to = \"compartment\", values_to = \"n\") %>%    mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"Z\"))) %>%    mutate(seasonality = \"no\") -> long_novax_noseason  novax_yesseason %>%    pivot_longer(-week, names_to = \"compartment\", values_to = \"n\") %>%    mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"Z\"))) %>%    mutate(seasonality = \"yes\") -> long_novax_yesseason  bind_rows(long_novax_noseason, long_novax_yesseason) %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%   mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%    mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = seasonality)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8) +   theme_bw() +   scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(title = paste(\"No vaccination, high survival - zeta =\", signif(high_surv, 4)),         y = \"Number of individuals\")"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"survival-probability-for-each-year-given-vaccination-data","dir":"Articles","previous_headings":"","what":"Survival probability for each year given vaccination data","title":"epi2024","text":"# Vietnam data","code":"vax_rates = rep(vacc.pcts, each=52)  data.frame(n_weeks = 1:(23*52), vax_rates = rep(vacc.pcts, each=52), betas_0 = rep(sim_betas_0, each = length(vax_rates)), betas_1 = my_beta_1) %>%    mutate(zeta = (1 / (1 + exp(-(betas_0 + betas_1 * vax_rates))))) %>%    mutate(betas_0 = factor(betas_0)) %>%   ggplot(aes(x = n_weeks, y = zeta, color = betas_0)) +   geom_line(linewidth = 1.2) +   # geom_hline(yintercept = 0.88, color = \"red\", linewidth = 0.9) +   theme_bw() +   # scale_x_continuous(labels = scales::label_percent(), breaks = seq(0, 1, 0.1)) +  labs(x = \"Week\", y = expression(zeta), color = expression(beta[0]),        # title = expression(\"Survival probability given vaccination data under three different survival curves\")       ) +   scale_color_manual(values = surv_3_cols) # scales::show_col(viridisLite::viridis(3, begin = 0.5, end = 0.8, option = \"A\"))  vietnam_data %>%    select(year, buffalo_cases, cattle_cases, horse_cases, total_animal_cases) %>%    mutate(year = factor(year, levels = 1991:2013)) %>%   pivot_longer(-c(year, total_animal_cases), names_to = \"species\", values_to = \"cases\") %>%    mutate(species = str_remove(species, \"_cases\")) -> case_data  vietnam_data %>%    select(year, vaccine_coverage) %>%    mutate(year = factor(year, levels = 1991:2013)) -> vax_data   case_data %>%    ggplot(aes(x = year, y = cases/10)) +   geom_col(data = vax_data, aes(x = year, y = vaccine_coverage), width = 0.5, color = \"lightgrey\", fill = \"lightgrey\") +   geom_text(data = vax_data, aes(x = year, y = vaccine_coverage, label = paste0(round(vaccine_coverage, 2)*100, \"%\")), vjust = -0.5, size = 2.5) +   geom_path(aes(color = species, group = species, linetype = species), linewidth = 1.2, alpha = 0.8) +   theme_bw() +   labs(y = \"Vaccine coverage\") +   scale_y_continuous(label = scales::label_percent(), limits = c(0, 1), sec.axis = sec_axis(~ . * 10, name = \"Number of cases\", breaks = 0:10)) +    scale_linetype_manual(values = c(\"solid\", \"longdash\", \"twodash\")) +   # scale_color_manual(values = c(\"#120D32FF\", \"#331068FF\", \"#7D2482FF\")) +   scale_color_manual(values = viridisLite::viridis(3, begin = 0.5, end = 0.8, option = \"A\")) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5),         legend.position = c(0.9, 0.85),          legend.background = element_rect(color = \"grey\"),         legend.title = element_blank())"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"vax-scenarios","dir":"Articles","previous_headings":"","what":"VAX SCENARIOS","title":"epi2024","text":"","code":"nweeks <- 23*52 my_b_season <- b_season(b0 = -30, b1 = 0.85, period = 3*52,t= 0:nweeks)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"low-survival-1","dir":"Articles","previous_headings":"VAX SCENARIOS","what":"LOW SURVIVAL","title":"epi2024","text":"","code":"vax_noseason_low_surv <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed b for no seasonality                             b_fixed = my_b_fixed,                             # parameters for survival curve with varying vaccination levels                             beta_0 = -10, beta_1 = 10, vax = vacc.pcts,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) plot_grid(vax_noseason_low_surv %>% build_SMILE_plots() + labs(title = \"noseason-lowsurv\"),           vax_noseason_low_surv %>% build_SL_plot()) vax_season_low_surv <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # Parameters to induce seasonal forcing in transmission                             b0 = -30, b1 = 0.85, period = 3*52,                             # parameters for survival curve with varying vaccination levels                             beta_0 = -10, beta_1 = 10, vax = vacc.pcts,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) plot_grid(vax_season_low_surv %>% build_SMILE_plots() + labs(title = \"season-lowsurv\"),           vax_season_low_surv %>% build_SL_plot())"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"med-survival-1","dir":"Articles","previous_headings":"VAX SCENARIOS","what":"MED SURVIVAL","title":"epi2024","text":"","code":"vax_noseason_med_surv <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed b for no seasonality                             b_fixed = my_b_fixed,                             # parameters for survival curve with varying vaccination levels                             beta_0 = -3, beta_1 = 10, vax = vacc.pcts,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) plot_grid(vax_noseason_med_surv %>% build_SMILE_plots() + labs(title = \"noseason_medsurv\"),           vax_noseason_med_surv %>% build_SL_plot()) vax_season_med_surv <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # Parameters to induce seasonal forcing in transmission                             b0 = -30, b1 = 0.85, period = 3*52,                             # parameters for survival curve with varying vaccination levels                             beta_0 = -3, beta_1 = 10, vax = vacc.pcts,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) plot_grid(vax_season_med_surv %>% build_SMILE_plots() + labs(title = \"season_medsurv\"),           vax_season_med_surv %>% build_SL_plot())"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"high-survival-1","dir":"Articles","previous_headings":"VAX SCENARIOS","what":"HIGH SURVIVAL","title":"epi2024","text":"","code":"vax_noseason_high_surv <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # fixed b for no seasonality                             b_fixed = my_b_fixed,                             # parameters for survival curve with varying vaccination levels                             beta_0 = 1.5, beta_1 = 10, vax = vacc.pcts,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) plot_grid(vax_noseason_high_surv %>% build_SMILE_plots() + labs(title = \"noseason_highsurv\"),           vax_noseason_high_surv %>% build_SL_plot()) vax_season_high_surv <- smile_main(theta = my_theta, tau = my_tau, years = 23,                             # Parameters to induce seasonal forcing in transmission                             b0 = -30, b1 = 0.85, period = 3*52,                             # parameters for survival curve with varying vaccination levels                             beta_0 = 1.5, beta_1 = 10, vax = vacc.pcts,                             # parameters for host population dynamics include births and deaths                             N1 = 20000, K = 50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                             output_df = TRUE) plot_grid(vax_season_high_surv%>% build_SMILE_plots() + labs(title = \"season_highsurv\"),           vax_season_high_surv%>% build_SL_plot())"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"figs-for-vax","dir":"Articles","previous_headings":"","what":"FIGS for VAX","title":"epi2024","text":"","code":"# LOW SURV big_df %>%    filter(survival == \"low\") %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%   mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%    mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = seasonality)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8) +   theme_bw() +   scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(title = \"Vaccination, low survival\",         y = \"Number of individuals\") # MED SURV big_df %>%    filter(survival == \"med\") %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%   mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%    mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = seasonality)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8) +   theme_bw() +   scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(title = \"Vaccination, med survival\",         y = \"Number of individuals\") # HIGH SURV big_df %>%    filter(survival == \"high\") %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%   mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%    mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = seasonality)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8) +   theme_bw() +   scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(title = \"Vaccination, high survival\",         y = \"Number of individuals\") big_df %>%    mutate(survival = factor(survival, levels = c(\"low\", \"med\", \"high\"))) %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%    filter(seasonality == \"no\") %>%      mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%   mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = survival)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8, alpha = 0.8) +   theme_bw() +   # scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(y = \"Number of individuals\", title = \"No seasonal forcing\") +   scale_color_manual(values = surv_3_cols) big_df %>%    mutate(survival = factor(survival, levels = c(\"low\", \"med\", \"high\"))) %>%    filter(compartment %in% c(\"S\", \"M\", \"L\")) %>%    filter(seasonality == \"yes\") %>%      mutate(cat = case_when(     compartment == \"S\" ~ \"S - Susceptible\",     compartment == \"M\" ~ \"M - Immune\",     compartment == \"L\" ~ \"L - Local Infectious Zone\"   )) %>%   mutate(cat = factor(cat, levels = c(\"S - Susceptible\", \"M - Immune\", \"L - Local Infectious Zone\"))) %>%    ggplot(aes(x = week, y = n, color = survival)) +   facet_wrap(~cat, scales = \"free\") +   geom_line(linewidth = 0.8, alpha = 0.8) +   theme_bw() +   # scale_color_manual(values = c(\"#E95562FF\", \"#120D32FF\")) +   # scale_linetype_manual(values = c(\"dashed\", \"solid\")) +   labs(y = \"Number of individuals\", title = \"With seasonal forcing\") +   scale_color_manual(values = surv_3_cols) big_df_R0 %>%    filter(seasonality == \"no\") %>%    # pivot_wider(names_from = compartment, values_from = n) %>%    # mutate(survival = factor(survival, levels = c(\"low\", \"med\", \"high\"))) %>%    # select(week, seasonality, survival, E) %>%    # mutate(R0 = calc_local_R0(tau = my_tau, theta = my_theta, b = my_b_fixed, E = E)) %>%    ggplot(aes(x = week, y = R0, color = survival)) +   # geom_point() +   geom_line(linewidth = 1) +   theme_bw() +   labs(title = \"Local R0 - no seasonality\") +   scale_color_manual(values = surv_3_cols)   big_df_R0 %>%    filter(seasonality == \"yes\") %>%    # pivot_wider(names_from = compartment, values_from = n) %>%    # mutate(survival = factor(survival, levels = c(\"low\", \"med\", \"high\"))) %>%    # select(week, seasonality, survival, E) %>%    # mutate(R0 = calc_local_R0(tau = my_tau, theta = my_theta, b = my_b_fixed, E = E)) %>%    ggplot(aes(x = week, y = R0, color = survival)) +   # geom_point() +   geom_line(linewidth = 1) +   theme_bw() +   labs(title = \"Local R0 - seasonal forcing\") +   scale_color_manual(values = surv_3_cols) big_df_R0 %>%    mutate(season = case_when(     seasonality == \"no\" ~ \"No seasonal transmission\",     seasonality == \"yes\"~ \"Seasonal forcing\"   )) %>%    mutate(survival = factor(survival, levels = c(\"low\", \"med\", \"high\"))) %>%   ggplot(aes(x = week, y = R0, color = survival)) +   facet_wrap(~season, ncol = 1, scales = \"free\") +   geom_line(linewidth = 1) +   theme_bw() +   scale_color_manual(values = surv_3_cols) +   theme(legend.position = \"bottom\") big_df %>%    mutate(survival = factor(survival, levels = c(\"low\", \"med\", \"high\"))) %>%   filter(compartment %in% c(\"S\", \"L\")) %>%    ggplot(aes(x = week, y = n, color = compartment, linetype = compartment)) +   facet_wrap(seasonality~survival, scales = \"free\") +   geom_path(linewidth = 0.7) +   theme_bw() +   scale_color_manual(values = c(\"red\", \"black\")) +   scale_linetype_manual(values = c(\"dashed\", \"solid\"))"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"seasonal-forcing-in-transmission","dir":"Articles","previous_headings":"FIGS for VAX","what":"Seasonal forcing in transmission","title":"epi2024","text":"model underlying sinusoidal function estimate probability infection, compared static value given scenarios without seasonal forcing (red line).","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/epi2024.html","id":"tests--","dir":"Articles","previous_headings":"","what":"Tests —————————-","title":"epi2024","text":"start 20,000 susceptible population, since host dynamics, reproduction, population just continues decrease result outbreak. case, incorporated high survival probability, exploring range 0.85 1, lower survival probability, faster decline population size.  Now consider population dynamics, yearly birth pulse, death causes aside just disease. Since still relatively high survival probability, see outbreaks occur yearly, following birth pulses. time, population tries settle close carrying capacity yearly outbreaks.    Now incorporate seasonal transmission population. Given 20 year time frame, see K-=50,000 population hasn’t reached ’s equilibrium yet, stick K=20,000 test seasonal transmission. case, population dynamics survival don’t play big role outbreak timing, see outbreaks mainly dominated period seasonal transmission equation. Outbreaks also larger, number infecteds deaths almost double saw scenarios host dynamics seasonal forcing. number deaths variable changes according survival probability.  observe example period seasonal transmission determines outbreaks. interesting consider different types outbreaks, perhaps thinking dormant spores causing outbreaks 5+ years animal dies.  changing parameters seasonal transmission function results changes amplitude oscillations. red line value used seasonality.","code":"surv_prob_seq <- seq(0.85, 0.98, by = 0.01)  my_smile_df <- NULL for(i in 1:length(surv_prob_seq)) {      i_survival <- surv_prob_seq[i]   sim <- smile_main(tau = 10, theta = 100, b_fixed = 0.001, years = 20, age_struc = FALSE, N1 = 20000, zeta_novax = i_survival, output_df = TRUE) %>%      mutate(survival = i_survival)      my_smile_df <- bind_rows(my_smile_df, sim) }    my_smile_df %>%      pivot_longer(-c(week, survival), names_to = \"compartment\", values_to = \"n\") %>%      mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"Z\"))) %>%      ggplot(aes(x = week, y = n, color = survival, group = survival)) +     facet_wrap(~compartment, scales = \"free\", nrow = 1) +     geom_line(linewidth = 1, alpha = 0.5) +     theme_bw() +    scale_color_viridis_c() surv_prob_seq <- seq(0.85, 0.98, by = 0.01)  my_smile_df <- NULL for(i in 1:length(surv_prob_seq)) {      i_survival <- surv_prob_seq[i]   sim <- smile_main(tau = 10, theta = 100, b_fixed = 0.001, years = 20, age_struc = TRUE, N1 = 20000, K =10000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                   zeta_novax = i_survival, output_df = TRUE) %>%      mutate(survival = i_survival)      my_smile_df <- bind_rows(my_smile_df, sim) }    my_smile_df %>%     mutate(N = S + M) %>%      pivot_longer(-c(week, survival), names_to = \"compartment\", values_to = \"n\") %>%      mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"N\"))) %>%      ggplot(aes(x = week, y = n, color = survival, group = survival)) +     facet_wrap(~compartment, scales = \"free\", nrow = 1) +     geom_line(linewidth = 1, alpha = 0.5) +     theme_bw() +    scale_color_viridis_c() +    labs(title = \"K =10,000\") surv_prob_seq <- seq(0.85, 0.98, by = 0.01)  my_smile_df <- NULL for(i in 1:length(surv_prob_seq)) {      i_survival <- surv_prob_seq[i]   sim <- smile_main(tau = 10, theta = 100, b_fixed = 0.001, years = 20, age_struc = TRUE, N1 = 20000, K =20000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                   zeta_novax = i_survival, output_df = TRUE) %>%      mutate(survival = i_survival)      my_smile_df <- bind_rows(my_smile_df, sim) }    my_smile_df %>%     mutate(N = S + M) %>%      pivot_longer(-c(week, survival), names_to = \"compartment\", values_to = \"n\") %>%      mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"N\"))) %>%      ggplot(aes(x = week, y = n, color = survival, group = survival)) +     facet_wrap(~compartment, scales = \"free\", nrow = 1) +     geom_line(linewidth = 1, alpha = 0.5) +     theme_bw() +    scale_color_viridis_c() +    labs(title = \"K =20,000\") surv_prob_seq <- seq(0.85, 0.98, by = 0.01)  my_smile_df <- NULL for(i in 1:length(surv_prob_seq)) {      i_survival <- surv_prob_seq[i]   sim <- smile_main(tau = 10, theta = 100, b_fixed = 0.001, years = 20, age_struc = TRUE, N1 = 20000, K =50000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                   zeta_novax = i_survival, output_df = TRUE) %>%      mutate(survival = i_survival)      my_smile_df <- bind_rows(my_smile_df, sim) }    my_smile_df %>%     mutate(N = S + M) %>%      pivot_longer(-c(week, survival), names_to = \"compartment\", values_to = \"n\") %>%      mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"N\"))) %>%      ggplot(aes(x = week, y = n, color = survival, group = survival)) +     facet_wrap(~compartment, scales = \"free\", nrow = 1) +     geom_line(linewidth = 1, alpha = 0.5) +     theme_bw() +    scale_color_viridis_c() +    labs(title = \"K =50,000\") surv_prob_seq <- seq(0.85, 0.98, by = 0.01)  my_smile_df <- NULL for(i in 1:length(surv_prob_seq)) {      i_survival <- surv_prob_seq[i]   sim <- smile_main(tau = 10, theta = 100, years = 20, age_struc = TRUE, N1 = 20000, K =20000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                   b0 = -30, b1 = 0.85, period = 3*52,                   zeta_novax = i_survival, output_df = TRUE) %>%      mutate(survival = i_survival)      my_smile_df <- bind_rows(my_smile_df, sim) }    my_smile_df %>%     mutate(N = S + M) %>%      pivot_longer(-c(week, survival), names_to = \"compartment\", values_to = \"n\") %>%      mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"N\"))) %>%      ggplot(aes(x = week, y = n, color = survival, group = survival)) +     facet_wrap(~compartment, scales = \"free\", nrow = 1) +     geom_line(linewidth = 1, alpha = 0.5) +     theme_bw() +    scale_color_viridis_c() +    labs(title = \"b0 = -30, b1 = 0.85, period = 3*52\") surv_prob_seq <- seq(0.85, 0.98, by = 0.01)  my_smile_df <- NULL for(i in 1:length(surv_prob_seq)) {      i_survival <- surv_prob_seq[i]   sim <- smile_main(tau = 10, theta = 100, years = 20, age_struc = TRUE, N1 = 20000, K =20000, rho_pop = 0.36, sigmaa = 0.92^(1/52),                   b0 = -30, b1 = 0.85, period = 7*52,                   zeta_novax = i_survival, output_df = TRUE) %>%      mutate(survival = i_survival)      my_smile_df <- bind_rows(my_smile_df, sim) }    my_smile_df %>%     mutate(N = S + M) %>%      pivot_longer(-c(week, survival), names_to = \"compartment\", values_to = \"n\") %>%      mutate(compartment = factor(compartment, levels = c(\"S\", \"M\", \"I\", \"L\", \"E\", \"N\"))) %>%      ggplot(aes(x = week, y = n, color = survival, group = survival)) +     facet_wrap(~compartment, scales = \"free\", nrow = 1) +     geom_line(linewidth = 1, alpha = 0.5) +     theme_bw() +    scale_color_viridis_c() +    labs(title = \"b0 = -30, b1 = 0.85, period = 7*52\") my_b_season <- b_season(b0 = -16, b1 = 0.6, period = 3*52,t= 0:nweeks)  data.frame(week = 0:nweeks, b = my_b_season) %>%    ggplot(aes(x = week, y = b)) +   geom_path() +   geom_hline(yintercept = my_b_fixed, color = \"red\") +   theme_bw() +   labs(y = \"b - probability of transmission\") my_b0s <- c(-30, -25, -18) my_b1s <- c(0.85, 0.7, 0.55) period <- c(3,5, 7)   # we have 18 parameter combinations   expand.grid(my_b0s, my_b1s, period) %>%     set_names(., c(\"b0\", \"b1\", \"period\")) %>%    mutate(b = pmap(list(b0, b1, period), function(x,y,z) b_season(x,y,z*52, 0:nweeks))) %>%   unnest(cols = c(b)) %>%    mutate(params = paste0(\"b0=\", b0, \",b1=\", b1, \",period=\", period)) %>%    mutate(week = rep(0:nweeks, 27),           period = factor(period, levels = c(3,5, 7))) -> b_season_df  b_season_df %>%    # filter(b1 == 0.6) %>%    mutate(b0 = paste(\"b0 =\", b0),          b1 = paste(\"b1 =\", b1)) %>%    ggplot(aes(x = week, y = b, group = params, color = period)) +   facet_wrap(vars(b1, b0), ncol = 3, scales = \"free\") +   geom_line(linewidth = 1) +   geom_hline(yintercept = my_b_fixed, color = \"red\") +   theme_bw() +   labs(y = \"b - probability of transmission\") +   scale_color_manual(values = c(\"grey\", \"darkolivegreen\", \"slateblue\"))"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"main_function","text":"Start loading package. article want show updated function works recreate simulation scenarios tested first iteration code. Previously, multiple functions needed incorporate population dynamics seasonality, . example, show set parameters package’s main function SMILE::smile_main() generate scenarios . following packages needed visualization data wrangling purposes: original code found first commit repository defined functions evaluate model different assumptions population dynamics seasonal forcing. code show also shown scenarios.","code":"set.seed(978645) library(SMILE) library(tidyverse) library(cowplot) # OG functions   # Author: Juan Pablo Gomez # Version 1.1. # Last revised: March 7 2018.  ################################# # Infection probability based on Ponciano and Capistran 2011. lambda.t    <-  function(theta,tau,b,E){          1-(theta/(theta+b*E))^tau      }  # Introducing seasonality in the infection probability through b.  b.season    <-  function(b0,b1,period,t){          exp(b0*(1+b1*cos((2*pi*t)/period)))      }  # Density dependent reproduction  rho.n   <-  function(N){          0.41/(1+(N/5000)^(10))      }  # First case of R0  r0  <-  function(b,E,theta,tau){          (b*E*tau)/theta      }  # Function to simulate climatic variable # a = upper asymptote # c = lower asymptote # b = time required to reach half of the climatic maxima # d = time at which the mid point between max and minimum climate is reached. clim.func   <-  function(a,c,d,d2,b,b2,t,sd){          if(missing(b2)){b2 <- b}     if(missing(c)){c<-0}          det.clim    <-   ((a-c)/(1+exp((d-t)/b)) - (a-c)/(1+exp((d2-t)/b2))) + c     rand.clim   <-  rnorm(length(t),det.clim,sd=sd)     return(rand.clim)      }  # Function used to estimate seasonality in infection probability using climatic variables # wt.bar = mean of climatic covariable # b0 = as in b.season # b1 = as in b.season # kw = scaling coefficient # t = time # period = as in b.season  infect2clim <-  function(wt.bar,b0,b1,kw,t,period){          wt.bar + ((b0*b1)/kw)*cos((2*pi*t)/period)      }"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"smile1","dir":"Articles","previous_headings":"","what":"smile1","title":"main_function","text":"age structuring, infection probability seasonal recreate scenario new function, use following parameters. Note argument age_struc set FALSE.","code":"# Function of SMILE without any age structuring # This is the most basic SMILE function in which I have assumed no population dynamics # and no deaths other than disease related.  # Fixed parameters are:  # alpha= 1/52 Probability of an immune individual to become Suceptible  # zeta = 0.88 Probability that an Infected individual becomes immune # gamma= 0.9868 Spore decay probability # psi = 1 Number of spores in one LIZ  # Variable parameters # b: Number of infections caused by one LIZ if there was no dispersion effort # tau and theta: Shape and Rate parameters of the gamma distribution defining dispersion effort.  smile1  <-  function(b,theta,tau,years){                  # Fixed parameters     alpha   <-  1/52     zeta    <-  0.88     gamma   <-  0.9868     psi     <-  1              n.weeks     <-  years*52 + 1     S<- M<- I<- L<-E <-N<-lambda<- array(0,dim=c(n.weeks),dimnames=list(1:(n.weeks)))     N[1]        <-  5000     S[1]        <-  N[1]          L[1]    <-  1; E[1] <-  L[1]*psi              for(t in 2:n.weeks){                  tm1 <-  t-1         lambda[tm1] <-  lambda.t(theta=theta,tau=tau,b=b,E=E[tm1])                  S[t]    <-  (S[tm1]*(1-lambda[tm1])) + M[tm1]*1/52         I[t]    <-  S[tm1]*lambda[tm1]         M[t]    <-  I[tm1]*zeta + M[tm1]*(1-(1/52))         L[t]    <-  I[tm1]*(1-zeta)         E[t]    <-  psi*L[tm1] + E[tm1]*gamma         N[t]    <-  S[t]+M[t]                  }           results     <-  list(Suceptibles=S[-1]                         ,Immune=M[-1]                         ,Infected=I[-1]                         ,LIZ=L[-1]                         ,Environment=E[-1]                         ,lambda=lambda[-1])      return(results) } tau=10 b=0.001  # Case 1.0: Low Dispersion. Mean dispersion effort is 0.1 theta=100 sim1.0  <-  smile1(b=b,tau=tau,theta=theta,years=10) sim1_1 <- smile_main(tau = tau, b_fixed = b, theta = theta, years = 10, age_struc = FALSE) # sim1_1 <- smile_main(tau = 10, b_fixed = 0.001, theta = 100, years = 10, age_struc = FALSE)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"smile2","dir":"Articles","previous_headings":"","what":"smile2","title":"main_function","text":"function simulates anthrax disease dynamics without host population dynamics infection probability seasonal forcing.","code":"# This function simulates anthrax disease dynamics without host population dynamics # but infection probability has seasonal forcing. # Fixed parameter are the same as in smile1 function.  # Variable parameters tau and theta are also the same and b0, b1 and period  # introduce seasonality to the infection probability by modifying b. In this function # I assume that seasonality is product of an exponential cosine function where the intensity  # of the seasonality is given by b0*b1 and period gives the periodicity of the outbreak # tau and theta: Shape and Rate parameters of the gamma distribution defining dispersion effort. # period: is the period in weeks of the exponential sinusoid function  smile2  <-  function(b0,b1,period,theta,tau,years){                  # Fixed parameters     alpha   <-  1/52     zeta    <-  0.88     gamma   <-  0.9868     psi     <-  1              n.weeks     <-  years*52 + 1     S<- M<- I<- L<-E <-N<-lambda<- array(0,dim=c(n.weeks),dimnames=list(1:(n.weeks)))     N[1]        <-  5000     S[1]        <-  N[1]          L[1]    <-  1; E[1] <-  L[1]*psi              for(t in 2:n.weeks){                  tm1 <-  t-1         b   <-  b.season(b0=b0,b1=b1,period=period,t=t)         lambda[tm1] <-  lambda.t(theta=theta,tau=tau,b=b,E=E[tm1])                  S[t]    <-  (S[tm1]*(1-lambda[tm1])) + M[tm1]*1/52         I[t]    <-  S[tm1]*lambda[tm1]         M[t]    <-  I[tm1]*zeta + M[tm1]*(1-(1/52))         L[t]    <-  I[tm1]*(1-zeta)         E[t]    <-  psi*L[tm1] + E[tm1]*gamma         N[t]    <-  S[t]+M[t]                  }           results     <-  list(Suceptibles=S[-1]                         ,Immune=M[-1]                         ,Infected=I[-1]                         ,LIZ=L[-1]                         ,Environment=E[-1]                         ,lambda=lambda[-1])      return(results) } # Case 2: No age structuring, infection probability has seasonal forcing tau=10 b0=-30 b1=0.85 period=3*52  # Case 2.0: Low dispersion theta=100 sim2.0  <-  smile2(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10) sim2_1 <- smile_main(b0 = b0, b1 = b1, period = period, theta = theta, tau = tau, years = 10, age_struc = FALSE) # sim2_1 <- smile_main(b0 = -30, b1 = 0.85, period = 3*52, theta = 100, tau = 10, years = 10, age_struc = FALSE)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"smile3","dir":"Articles","previous_headings":"","what":"smile3","title":"main_function","text":"births seasonal infection probability don’t consider seasonal forcing, b0 b1 left null (default) give parameter b_fixed fixed infection probability. argument age_struc set FALSE, function use default parameters K rho_pop estimate birth pulses every year. default parameters carrying capacity reproductive rate can changed easily adding function arguments.","code":"# In this function we introduce population dynamics only as births at the begining of the year # determined by density dependent reproduction with a carrying capacity of 5000.  smile3  <-  function(b,theta,tau,years){                  # Fixed parameters     alpha   <-  1/52     zeta    <-  0.88     gamma   <-  0.9868     psi     <-  1              n.weeks     <-  years*52 + 1     S<- M<- I<- L<-E <-N<-lambda<- array(0,dim=c(n.weeks),dimnames=list(1:(n.weeks)))     N[1]        <-  5000     S[1]        <-  N[1]         L[1]    <-  1; E[1] <-  L[1]*psi              for(t in 2:n.weeks){                          tm1 <-  t-1         lambda[tm1] <-  lambda.t(theta=theta,tau=tau,b=b,E=E[tm1])         births.happen   <-  as.numeric(t%%52==0)         rep.prob    <-  rho.n(N[tm1])                  S[t]    <-  (S[tm1]*(1-lambda[tm1])) + M[tm1]*1/52 + rep.prob*(N[tm1])*births.happen         I[t]    <-  S[tm1]*lambda[tm1]         M[t]    <-  I[tm1]*zeta + M[tm1]*(1-(1/52))         L[t]    <-  I[tm1]*(1-zeta)         E[t]    <-  psi*L[tm1] + E[tm1]*gamma         N[t]    <-  S[t]+M[t]                  }           results     <-  list(Suceptibles=S[-1]                         ,Immune=M[-1]                         ,Infected=I[-1]                         ,LIZ=L[-1]                         ,Environment=E[-1]                         ,lambda=lambda[-1])      return(results) } # Case 3: With births and no seasonal infection probability tau=10 b=0.001  # Case 3.0: Low Dispersion. Mean dispersion effort is 0.1 theta=100 sim3.0  <-  smile3(b=b,tau=tau,theta=theta,years=10) sim3_1 <- smile_main(tau = tau, b_fixed = b, theta = theta, years = 10) # sim3_1 <- smile_main(tau = 10, b_fixed = 0.001, theta = 100, years = 10)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"smile4","dir":"Articles","previous_headings":"","what":"smile4","title":"main_function","text":"births seasonal forcing infection function change parameter deaths non-disease causes sigmaa = 1, since smile4 function consider deaths causes. necessary change parameter though, since default function already set 1.","code":"# smile 4 function introduces population dynamics as in smile3 function but uses  # seasonal forcing for infection probability.  smile4  <-  function(b0,b1,period,theta,tau,years){                  # Fixed parameters     alpha   <-  1/52     zeta    <-  0.88     gamma   <-  0.9868     psi     <-  1              n.weeks     <-  years*52 + 1     S<- M<- I<- L<-E <-N<-lambda<- array(0,dim=c(n.weeks),dimnames=list(1:(n.weeks)))     N[1]        <-  5000     S[1]        <-  N[1]         L[1]    <-  1; E[1] <-  L[1]*psi              for(t in 2:n.weeks){                          tm1 <-  t-1         b   <-  b.season(b0,b1,period,t)         lambda[tm1] <-  lambda.t(theta=theta,tau=tau,b=b,E=E[tm1])         births.happen   <-  as.numeric(t%%52==0)         rep.prob    <-  rho.n(N[tm1])                  S[t]    <-  (S[tm1]*(1-lambda[tm1])) + M[tm1]*1/52 + rep.prob*(N[tm1])*births.happen         I[t]    <-  S[tm1]*lambda[tm1]         M[t]    <-  I[tm1]*zeta + M[tm1]*(1-(1/52))         L[t]    <-  I[tm1]*(1-zeta)         E[t]    <-  psi*L[tm1] + E[tm1]*gamma         N[t]    <-  S[t]+M[t]                  }           results     <-  list(Suceptibles=S[-1]                         ,Immune=M[-1]                         ,Infected=I[-1]                         ,LIZ=L[-1]                         ,Environment=E[-1]                         ,lambda=lambda[-1])      return(results) } tau=10 b0=-30 b1=0.85 period=3*52  # Case 4.0: Low Dispersion. Mean dispersion effort is 0.1 theta=100 sim4.0  <-  smile4(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10) sim4_1 <- smile_main(b0 = b0, b1 = b1, period = period, theta = theta, tau = tau, years = 10, sigmaa = 1) # sim4_1 <- smile_main(b0 = -30, b1 = 0.85, period = 3*52, theta = 100, tau = 10, years = 10, sigmaa = 1)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"smile5","dir":"Articles","previous_headings":"","what":"smile5","title":"main_function","text":"one incorporates host population dynamics seasonal forcing, additionally puts death causes.","code":"# smile5 is the most realistic function of the group since it incorporates both births and deaths from other causes # than the disease in population dynamics. Deaths are given by a 1- sigmaa = 1 - 0.92^(1/52) smile5  <-  function(b0,b1,period,theta,tau,years){                  # Fixed parameters     alpha   <-  1/52     zeta    <-  0.88     gamma   <-  0.9868     sigmaa  <-  0.92^(1/52)     psi     <-  1              n.weeks     <-  years*52 + 1     S<- M<- I<- L<-E <-N<-lambda<- array(0,dim=c(n.weeks),dimnames=list(1:(n.weeks)))     N[1]        <-  5000     S[1]        <-  N[1]         L[1]    <-  1; E[1] <-  L[1]*psi              for(t in 2:n.weeks){                          tm1 <-  t-1         b   <-  b.season(b0,b1,period,t)         lambda[tm1] <-  lambda.t(theta=theta,tau=tau,b=b,E=E[tm1])         births.happen   <-  as.numeric(t%%52==0)         rep.prob    <-  rho.n(N[tm1])                  S[t]    <-  (S[tm1]*(1-lambda[tm1]))*sigmaa + M[tm1]*sigmaa*1/52 + rep.prob*(N[tm1])*births.happen         I[t]    <-  S[tm1]*lambda[tm1]         M[t]    <-  I[tm1]*zeta + M[tm1]*sigmaa*(1-(1/52))         L[t]    <-  I[tm1]*(1-zeta)         E[t]    <-  psi*L[tm1] + E[tm1]*gamma         N[t]    <-  S[t]+M[t]                  }           results     <-  list(Suceptibles=S[-1]                         ,Immune=M[-1]                         ,Infected=I[-1]                         ,LIZ=L[-1]                         ,Environment=E[-1])      return(results) } tau=10 b0=-30 b1=0.85 period=3*52  # Case 5.0: Low Dispersion. Mean dispersion effort is 0.1 theta=10 sim5.0      <-  smile5(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10) sim5_1 <- smile_main(b0 = b0, b1 = b1, period = period, theta = theta, tau = tau, years = 10, sigmaa = 0.92^(1/52)) # sim5_1 <- smile_main(b0 = -30, b1 = 0.85, period = 3*52, theta = 10, tau = 10, years = 10, sigmaa = 0.92^(1/52))"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"stochastic-version-of-the-last-one","dir":"Articles","previous_headings":"","what":"Stochastic version of the last one:","title":"main_function","text":"similar results, considering stochastic versions. makes sense.","code":"# Final function is the stochastic version of smile5 function. It incorporates births, deaths by disease # and other causes and seasonal forcing of the infection probability. The stochasticity is introduced by  # assuming that Infected, Immune and LIZ are all binomial random variables. I allowed stochasticity in the  # number of spores introduced to the environment by assuming that it is poisson random variable with mean # given by the number of diseas deaths times a constant. Virulence of spores that remain virulent in the  # environment is also a binomial random variable with with probability of succes gamma = 0.9868.  smile5.stoch    <-  function(b0,b1,period,theta,tau,years){                  # Fixed parameters     alpha   <-  1/52     zeta    <-  0.88     gamma   <-  0.9868     sigmaa  <-  0.92^(1/52)     psi     <-  1              n.weeks     <-  years*52 + 1     S<- M<- I<- L<-E <-N<-lambda<- array(0,dim=c(n.weeks),dimnames=list(1:(n.weeks)))     N[1]        <-  5000     S[1]        <-  N[1]         L[1]    <-  1; E[1] <-  rpois(1,L[1]*psi    )          for(t in 2:n.weeks){                          tm1 <-  t-1         b   <-  b.season(b0,b1,period,t)         lambda[tm1] <-  lambda.t(theta=theta,tau=tau,b=b,E=E[tm1])         births.happen   <-  as.numeric(t%%52==0)         rep.prob    <-  rho.n(N[tm1])                  I[t]    <-  rbinom(1,S[tm1],lambda[tm1])         births  <-  rbinom(1,N[tm1],rep.prob)*births.happen         M.surv  <-  rbinom(1,M[tm1],sigmaa)         M.recov <-  rbinom(1,M.surv,alpha)         M.new   <-  rbinom(1,I[tm1],zeta)         S[t]    <-  rbinom(1,S[tm1]-I[t],sigmaa) + M.recov + births         M[t]    <-  M.new + (M.surv - M.recov)         L[t]    <-  (I[tm1]-M.new)         E[t]    <-  rpois(1,psi*L[tm1]) + rbinom(1,E[tm1],gamma)         N[t]    <-  S[t]+M[t]                  }           results     <-  list(Suceptibles=S[-1]                         ,Immune=M[-1]                         ,Infected=I[-1]                         ,LIZ=L[-1]                         ,Environment=E[-1])      return(results) } stochastic.sims <-  list() LIZ.stoch       <-  matrix(0,nrow=100,ncol=520) for(i in 1:100){        stochastic.sims[[i]]    <-  smile5.stoch(b0=b0,b1=b1,period=period,tau=tau,theta=theta,years=10)     LIZ.stoch[i,]           <-  stochastic.sims[[i]]$LIZ      } stochastic_sims <-  list() LIZ_stoch       <-  matrix(0,nrow=100,ncol=520) for(i in 1:100){        stochastic_sims[[i]]    <-  smile_main(b0 = b0, b1 = b1, period = period, theta = theta, tau = tau, years = 10, sigmaa = 0.92^(1/52),                                         stochastic = TRUE)     LIZ_stoch[i,]           <-  stochastic_sims[[i]]$LIZ      } as.data.frame(LIZ.stoch) %>% rownames_to_column(var = \"sim\") %>%    pivot_longer(-sim, names_to = \"week\", values_to = \"n_LIZ\") %>%    mutate(week = str_remove(week, \"V\"), week = as.numeric(week)) %>%    mutate(model = \"OG\") -> og_stochastic  as.data.frame(LIZ_stoch) %>% rownames_to_column(var = \"sim\") %>%    pivot_longer(-sim, names_to = \"week\", values_to = \"n_LIZ\") %>%    mutate(week = str_remove(week, \"V\"), week = as.numeric(week)) %>%    mutate(model = \"NEW\") -> new_stochastic bind_rows(og_stochastic, new_stochastic) %>%    # filter(sim %in% 10:15) %>%    ggplot(aes(x = week, y = n_LIZ, group = sim)) +   facet_wrap(~model) +   # facet_grid(sim~model) +   geom_line() +   theme_minimal()"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"estimation","dir":"Articles","previous_headings":"","what":"Estimation","title":"main_function","text":"Estimation parameters using last scenario stochastic simulations","code":"# Functions for estimating the parameters of the SMILE model b0, b1, period, theta and tau. # The estimation assumes that the observed LIZ are poisson distributed product of observation error # and not process error as properly described in the smile5.stoch function. This is a set of two functions # the first one gives the negative loglikelihood of the model that will be minimized using the optim function. # The second one is a wrapper of the optim function that returns the maximum likelihood estimates of the parameters. # Period must be in weeks and SMILE.obs must follow exactly the formating of the output of one of the above SMILE  # functions.  LIZ.negll   <-  function(pars=c(theta,tau,b0,b1),period,years,SMILE.obs){              theta   <-  exp(pars[1])     tau     <-  exp(pars[2])     b0      <-  pars[3]     b1      <-  pars[4]     # Likelihood of infection seasonality as a function of climate          #wt.bar.hat <-  mean(clim)     #clim.pred  <-  infect2clim(wt.bar=wt.bar.hat,b0=b0,b1=b1,kw=kw,t=1:length(clim),period=period)     #clim.ssq   <-  sum((clim-clim.pred)^2)          SMILE.pred  <-  smile5(b0,b1,period,theta,tau,years)     ts2keep     <-  names(SMILE.pred)%in%names(SMILE.obs)     SMILE.pred  <-  SMILE.pred[which(ts2keep==TRUE)]     loglik.ls   <-  vector(\"list\",length(SMILE.obs))          for(i in 1:length(SMILE.obs)){                  loglik.ls[[i]]  <-  dpois(SMILE.obs[[i]],SMILE.pred[[i]],log=TRUE)              }          loglik.ls   <-  lapply(loglik.ls,sum)          loglik  <-  sum(unlist(loglik.ls))          if(!is.finite(loglik)){loglik=-.Machine$double.xmax}     negll   <-  -loglik #+ clim.ssq     return(negll)      }  SMILE.param.estim   <-  function(b0,b1,theta,tau,period,SMILE.obs,method=\"BFGS\"){          years       <-  length(SMILE.obs[[1]])/52     pars        <-  c(theta,tau,b0,b1)                  optim.res   <-  optim(par=pars,fn=LIZ.negll,method=method,SMILE.obs=SMILE.obs                                 ,years=years,period=period)              theta.hat   <-  exp(optim.res$par[1])     tau.hat     <-  exp(optim.res$par[2])     b0.hat      <-  optim.res$par[3]     b1.hat      <-  optim.res$par[4]           neg.ll      <-  optim.res$value          results     <-  c(tau=tau.hat,theta=theta.hat,b0=b0.hat,b1=b1.hat,loglik=-neg.ll)     return(results) } set.seed(123)  b0_start    <-  runif(1,min=-36,max=-24)  b1_start    <-  runif(1,min=0.656,max=0.984)  theta_start <-  log(runif(1,min=8,max=12))  tau_start   <-  log(runif(1,min=8,max=12))  SMILE_obs <- stochastic.sims nreps <- length(SMILE_obs)  hat_mat         <-  array(0,dim=c(nreps,5),dimnames=list(1:nreps                                                              ,c(\"tau\",\"theta\",\"b0\",\"b1\",\"loglik\")))  for(i in 1:nreps){          hat_mat[i,] <-  SMILE.param.estim(b0 = b0_start,                                      b1 = b1_start,                                      theta = theta_start,                                      tau = tau_start,                                      SMILE.obs=SMILE_obs[[i]],period=3*52)                                 }"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/articles/main_function.html","id":"with-the-new-functions","dir":"Articles","previous_headings":"Estimation","what":"with the new functions","title":"main_function","text":"Parameter estimates stochastic simulations generated. simulations used values shown red line generated.","code":"set.seed(123)  b0_start    <-  runif(1,min=-36,max=-24)  b1_start    <-  runif(1,min=0.656,max=0.984)  theta_start <-  log(runif(1,min=8,max=12))  tau_start   <-  log(runif(1,min=8,max=12))  SMILE_obs <- stochastic_sims nreps <- length(SMILE_obs)  hat_mat         <-  array(0,dim=c(nreps,5),dimnames=list(1:nreps                                                              ,c(\"tau\",\"theta\",\"b0\",\"b1\",\"loglik\")))  for(i in 1:nreps){          hat_mat[i,] <-  SMILE_param_estim(b0 = b0_start,                                      b1 = b1_start,                                      theta = theta_start,                                      tau = tau_start,                                      SMILE.obs=SMILE_obs[[i]],period=3*52)                                 }"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"javi rudolph. Author, maintainer.","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"rudolph j (2024). SMILE: Compartmental models anthrax.. R package version 0.0.0.9000, https://ufseerlab.github.io/SMILE/.","code":"@Manual{,   title = {SMILE: Compartmental models for anthrax.},   author = {javi rudolph},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://ufseerlab.github.io/SMILE/}, }"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/index.html","id":"smile","dir":"","previous_headings":"","what":"Compartmental models for anthrax.","title":"Compartmental models for anthrax.","text":"repository currently developed members SEER Lab. stems published study Decoupling environmental effects host population dynamics anthrax, classic reservoir-driven disease Gomez et.al. 2018. can check original code associated publication early commits repository. currently developing model incorporate effect vaccination R package.","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compartmental models for anthrax.","text":"can install development version SMILE GitHub : contributing, please clone repository create new branch. can submit changes pull request. questions, please submit issue. code repository contains functions defined SMILE compartmental model. SMILE, model created model environmentally mediated diseases focus anthrax dynamics based outbreaks Northwestern plains United states. model consists five compartments, Suceptible, Immune, Infected, Local Infectious Zone, Environment. model assumes transmission disease indirect intensity transmission driven pure birth stochastic process accounts heterogeneity dispersion effort pathogen. also allows specifying sinusoidal function drives seasonality outbreaks decouples basic recruitment due population dynamics. also derived form R0 disease based assumptions deriving infection probability stochastic process. las set functions used estimate paramters define distribution dispersion effort shape seasonality envrionmental driver. addition sorce function, provide files data Montana Outbreak well scripts written analysis ad figure reproduction provided text.","code":"# install.packages(\"devtools\") devtools::install_github(\"UFSEERLab/SMILE\")"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 SMILE authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/b_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the number of infections caused by 1 LIZ under seasonality and no dispersion effort — b_season","title":"Estimating the number of infections caused by 1 LIZ under seasonality and no dispersion effort — b_season","text":"Introducing seasonality infection probability b.","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/b_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the number of infections caused by 1 LIZ under seasonality and no dispersion effort — b_season","text":"","code":"b_season(b0, b1, period, t)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/b_season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the number of infections caused by 1 LIZ under seasonality and no dispersion effort — b_season","text":"b0 strength seasonality parameter b1 strength seasonality parameter period periodicity infection weeks t vector time","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/b_season.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the number of infections caused by 1 LIZ under seasonality and no dispersion effort — b_season","text":"description","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/b_season.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating the number of infections caused by 1 LIZ under seasonality and no dispersion effort — b_season","text":"","code":"b_season(-30, 0.85, 3*52, 1:10) #>  [1] 8.047069e-25 8.561847e-25 9.492965e-25 1.096651e-24 1.319669e-24 #>  [6] 1.653718e-24 2.157242e-24 2.928127e-24 4.133515e-24 6.065193e-24"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/calc_local_R0.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating local R0 — calc_local_R0","title":"Calculating local R0 — calc_local_R0","text":"Calculating local R0","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/calc_local_R0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating local R0 — calc_local_R0","text":"","code":"calc_local_R0(tau, theta, b, E)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/calc_local_R0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating local R0 — calc_local_R0","text":"tau dispersion parameter theta dispersion parameter b number infections caused one LIZ E Number spores environment","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/calc_local_R0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculating local R0 — calc_local_R0","text":"description","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/calc_local_R0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculating local R0 — calc_local_R0","text":"","code":"calc_local_R0(10, 10, 0.001, 1) #> [1] 0.001"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/lambda_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate infection probability for time t — lambda_t","title":"Calculate infection probability for time t — lambda_t","text":"Infection probability based Ponciano Capistran 2011.","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/lambda_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate infection probability for time t — lambda_t","text":"","code":"lambda_t(theta, tau, b, E)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/lambda_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate infection probability for time t — lambda_t","text":"theta disease dispersion parameter tau disease dispersion parameter b number infections caused one LIZ E Number spores environment","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/lambda_t.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate infection probability for time t — lambda_t","text":"description","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/lambda_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate infection probability for time t — lambda_t","text":"","code":"lambda_t(10, 10, 0.001, 1) #> [1] 0.0009994502"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/LIZ_negll.html","id":null,"dir":"Reference","previous_headings":"","what":"LIZ negative log likelihood — LIZ_negll","title":"LIZ negative log likelihood — LIZ_negll","text":"used estimation function","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/LIZ_negll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LIZ negative log likelihood — LIZ_negll","text":"","code":"LIZ_negll(pars = c(theta, tau, b0, b1), period, years, SMILE.obs)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/LIZ_negll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LIZ negative log likelihood — LIZ_negll","text":"pars list parameters estimate period periodicity infection weeks years number years SMILE.obs observation data","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/LIZ_negll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LIZ negative log likelihood — LIZ_negll","text":"description","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/rho_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate average reproduction rate at time t — rho_n","title":"Calculate average reproduction rate at time t — rho_n","text":"Calculate average reproduction rate time t","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/rho_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate average reproduction rate at time t — rho_n","text":"","code":"rho_n(N, K, rho = 0.41)"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/rho_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate average reproduction rate at time t — rho_n","text":"N population size time t K carrying capacity rho average reproduction rate","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/rho_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate average reproduction rate at time t — rho_n","text":"description","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/rho_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate average reproduction rate at time t — rho_n","text":"","code":"rho_n(2000, 5000) #> [1] 0.409957"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/SMILE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SMILE: Compartmental models for anthrax. — SMILE-package","title":"SMILE: Compartmental models for anthrax. — SMILE-package","text":"Code papers model anthrax dynamics using compartmental models.","code":""},{"path":[]},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/SMILE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SMILE: Compartmental models for anthrax. — SMILE-package","text":"Maintainer: javi rudolph javiera.av@ufl.edu","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/smile_main.html","id":null,"dir":"Reference","previous_headings":"","what":"SMILE main function — smile_main","title":"SMILE main function — smile_main","text":"function encompasses original functions assumptions. outputs time series compartments given set parameters.","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/smile_main.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SMILE main function — smile_main","text":"","code":"smile_main(   b0,   b1,   period,   theta,   tau,   years,   alpha = 1/52,   zeta_novax = 0.88,   gamma = 0.9868,   sigmaa = 1,   psi = 1,   N1 = 5000,   K = 5000,   vax = NULL,   beta_0 = NULL,   beta_1 = NULL,   b_fixed = NULL,   age_struc = TRUE,   stochastic = FALSE,   LIZ_init = 1,   rho_pop = NULL,   output_df = FALSE )"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/smile_main.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SMILE main function — smile_main","text":"b0 strength seasonality parameter b1 strength seasonality parameter period periodicity infection weeks theta dispersion effort parameter tau dispersion effort parameter years number years run simulation alpha probability transitioning immune susceptible one week timestep zeta_novax probability becoming immune infection (fixed vaccination) gamma spore persistence rate sigmaa rate death causes disease psi number spores per carcass N1 starting population size K carrying capacity population dynamics vax vaccination rates year beta_0 survival parameter beta_1 vaccine survival parameter b_fixed Number infections caused one LIZ dispersion effort zero assume seasonality age_struc default TRUE, set false, population dynamics considered stochastic default FALSE, simulations deterministic LIZ_init Initial number carcasses, set default 1 rho_pop average reproduction rate used simulating population dynamics output_df set TRUE, return dataframe instead list","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/smile_main.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SMILE main function — smile_main","text":"description","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/smile_main.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SMILE main function — smile_main","text":"","code":"head(SMILE::smile_main(-30, 0.85, 3*52, 10, 10, 10, output_df = TRUE)) #>   week    S M I L        E #> 1    1 5000 0 0 1 1.000000 #> 2    2 5000 0 0 0 1.986800 #> 3    3 5000 0 0 0 1.960574 #> 4    4 5000 0 0 0 1.934695 #> 5    5 5000 0 0 0 1.909157 #> 6    6 5000 0 0 0 1.883956"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/SMILE_param_estim.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter estimation from data — SMILE_param_estim","title":"Parameter estimation from data — SMILE_param_estim","text":"Parameter estimation data","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/SMILE_param_estim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter estimation from data — SMILE_param_estim","text":"","code":"SMILE_param_estim(b0, b1, theta, tau, period, SMILE.obs, method = \"BFGS\")"},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/SMILE_param_estim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter estimation from data — SMILE_param_estim","text":"b0 starting value b1 starting value theta starting value tau starting value period starting value SMILE.obs data method set BFGS","code":""},{"path":"https://ufseerlab.github.io/SMILE/, https://github.com/UFSEERLab/SMILE/reference/SMILE_param_estim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter estimation from data — SMILE_param_estim","text":"description","code":""}]
